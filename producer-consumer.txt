#include <iostream>
#include <thread>
#include <semaphore.h>
#include <vector>

using namespace std;

const int BUFFER_SIZE = 5;      
const int NUM_PRODUCERS = 2;     
const int NUM_CONSUMERS = 2;     

sem_t empty; 
sem_t full; 
sem_t mutex; 

vector<int> buffer(BUFFER_SIZE); 

void producer(int id) {
    for (int i = 0; i < 10; i++) {
        int item = rand() % 100; 

        sem_wait(&empty); 
        sem_wait(&mutex); 

        buffer[i % BUFFER_SIZE] = item; 
        cout << "Producer " << id << " produced item: " << item << endl;

        sem_post(&mutex); 
        sem_post(&full); 
    }
}

void consumer(int id) {
    for (int i = 0; i < 10; i++) {
        sem_wait(&full); 
        sem_wait(&mutex); 

        int item = buffer[i % BUFFER_SIZE]; 
        cout << "Consumer " << id << " consumed item: " << item << endl;

        sem_post(&mutex); 
        sem_post(&empty); 
    }
}

int main() {
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    sem_init(&mutex, 0, 1);

    vector<thread> producers;
    vector<thread> consumers;

    for (int i = 0; i < NUM_PRODUCERS; i++) {
        producers.emplace_back(producer, i);
    }

    for (int i = 0; i < NUM_CONSUMERS; i++) {
        consumers.emplace_back(consumer, i);
    }

    // Join the threads
    for (auto& producer_thread : producers) {
        producer_thread.join();
    }

    for (auto& consumer_thread : consumers) {
        consumer_thread.join();
    }

    // Destroy semaphores
    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);

    return 0;
}